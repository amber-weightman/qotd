name: Build and push test results to SonarCloud

on:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0

      # Speed-up analysis by caching the scanner workspace
      - name: Cache SonarCloud workspace
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar-cache
          restore-keys: ${{ runner.os }}-sonar-cache

      # Speed-up analysis by caching the scanner installation
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        # The --version argument is optional. If it is omitted the latest version will be installed.
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build
        shell: powershell
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # The secret referenced in the command-line by SONAR_TOKEN should be generated
          # from https://sonarcloud.io/account/security/
          # The organization and project arguments (see /o and /k) are displayed
          # on the project dashboard in SonarCloud.
        run: |
    
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"amber-weightman_qotd" /o:"amber-weightman" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths=".\test\TestCoverage\SonarQube.xml" # /d:sonar.testExecutionReportPaths="D:\a\qotd\qotd\test\TestResults\SonarTestResults.xml"
          
          dotnet restore ./Qotd.sln
          dotnet build ./Qotd.sln --configuration Release

          dotnet test --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=TestResults.trx" --results-directory ./test/TestResults # coverage.corbetura & testresults.trx

          # not compatible with .NET 8 yet I think???, process terminates with below error
          # ERROR: Error during parsing of generic test execution report 'D:\a\qotd\qotd\test\TestResults\SonarTestResults.xml'. Look at the SonarQube documentation to know the expected XML format.
          # ERROR: Caused by: D:\a\qotd\qotd\test\TestResults\SonarTestResults.xml (The system cannot find the file specified)
          # dotnet tool install --global dotnet-trx2sonar-updated
          # dotnet-trx2sonar -d ./ -o ./test/TestResults/SonarTestResults.xml # You must install or update .NET to run this application. # SonartestResults.xml

          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator "-reports:.\test\TestResults\*\coverage.cobertura.xml" "-targetdir:./test/TestCoverage" "-reporttypes:SonarQube"

          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"